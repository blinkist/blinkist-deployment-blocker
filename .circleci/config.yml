version: 2

defaults_deploy: &defaults_deploy
  working_directory: ~/app
  shell: /bin/bash --login
  docker:
    - image: circleci/ruby:2.5.3-node-browsers

jobs:
  specs:
    working_directory: ~/app
    parallelism: 1
    docker:
      - image: circleci/ruby:2.5.3-node-browsers
        environment:
          CIRCLE_CI: true
          RAILS_ENV: test
          MYSQL_URL: "mysql2://root:mysql@127.0.0.1/deployment_blocker_test"
      - image: circleci/mysql:5.6
        environment:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: deployment_blocker_test

    steps:
      - checkout
      - run: git submodule update --init

      - restore_cache:
          keys:
            - rails-bundle-{{ checksum "Gemfile.lock" }}
            - rails-bundle-
      - run:
          name: Bundle Install
          command: bundle check --path vendor/bundle || bundle install --path vendor/bundle

      - save_cache:
          key: rails-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - type: shell
        name: Migrate DB
        command: bundle exec rails db:migrate

  build_and_push_docker_image:
    <<: *defaults_deploy
    steps:
      - checkout
      - setup_remote_docker: {docker_layer_caching: true}
      - run:
          name: Docker login
          command:  $(docker run -e AWS_DEFAULT_REGION="$ECS_DEPLOY_AWS_DEFAULT_REGION" -e AWS_ACCESS_KEY_ID="$ECS_DEPLOY_AWS_ACCESS_KEY_ID" -e AWS_SECRET_ACCESS_KEY="$ECS_DEPLOY_AWS_SECRET_ACCESS_KEY" --entrypoint /usr/bin/aws blinkist/ecs-deploy:$ECS_DEPLOY_VERSION ecr get-login --no-include-email)

      - run:
          name: Building docker image
          command: |
            BUILD_ARGS=""
            if egrep -q "^ARG [0-9a-zA-Z\_\-]+$" ./Dockerfile ;then
              ARGS=$(cat ./Dockerfile |grep "^ARG "|grep -v "=" | sed 's/ARG //g'|xargs )
            fi
            if [ -z ${ARGS+x} ]; then
              echo "- no ARG defined in Dockerfile;"
            else
              echo "ARG defined in Dockerfile";
              for i in $ARGS
              do
                VAL=$(eval echo '$'$i)
                BUILD_ARGS+=" --build-arg $i=$VAL "
              done
            fi
            if docker run -e AWS_DEFAULT_REGION="$ECS_DEPLOY_AWS_DEFAULT_REGION" -e AWS_ACCESS_KEY_ID="$ECS_DEPLOY_AWS_ACCESS_KEY_ID" -e AWS_SECRET_ACCESS_KEY="$ECS_DEPLOY_AWS_SECRET_ACCESS_KEY" --entrypoint /usr/bin/aws  ecr describe-images --repository-name=$APP_NAME --image-ids=imageTag=$CIRCLE_SHA1 --region $ECS_DEPLOY_AWS_DEFAULT_REGION >/dev/null  2>/dev/null ; then
               echo "Image already exists, we don't have to build"
            else
               echo "Image does not exist, let's build"
               echo docker build $BUILD_ARGS -t ${ECR_REPO_BASE}/${APP_NAME}:$CIRCLE_SHA1 .
               docker build $BUILD_ARGS -t ${ECR_REPO_BASE}/${APP_NAME}:$CIRCLE_SHA1 .
               docker push ${ECR_REPO_BASE}/${APP_NAME}:$CIRCLE_SHA1
            fi

  deploy-web:
    <<: *defaults_deploy
    steps:
      - checkout
      - setup_remote_docker: {docker_layer_caching: true}
      - run:
          name: Deploy to AWS
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              docker run -e AWS_DEFAULT_REGION="${DEV_REGION}" -e AWS_ACCESS_KEY_ID="$ECS_DEPLOY_AWS_ACCESS_KEY_ID" -e AWS_SECRET_ACCESS_KEY="$ECS_DEPLOY_AWS_SECRET_ACCESS_KEY" blinkist/ecs-deploy:$ECS_DEPLOY_VERSION -c $DEV_CLUSTER_WEB  -n ${APP_NAME}-web -i  ${ECR_REPO_BASE}/${APP_NAME}:$CIRCLE_SHA1 -t 240 -a $DEV_DEPLOY_ROLE
            fi
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              docker run -e AWS_DEFAULT_REGION="${PROD_REGION}" -e AWS_ACCESS_KEY_ID="$ECS_DEPLOY_AWS_ACCESS_KEY_ID" -e AWS_SECRET_ACCESS_KEY="$ECS_DEPLOY_AWS_SECRET_ACCESS_KEY" blinkist/ecs-deploy:$ECS_DEPLOY_VERSION -c $PROD_CLUSTER_WEB  -n ${APP_NAME}-web -i  ${ECR_REPO_BASE}/${APP_NAME}:$CIRCLE_SHA1 -t 240 -a $PROD_DEPLOY_ROLE
            fi


workflows:
  version: 2
  test_and_build:
    jobs:
      - specs:
          context: Github
      - build_and_push_docker_image:
          context: Github
          requires:
            - specs
          filters:
            branches:
              only:
                - master
                - develop
      - deploy-web:
          context: Github
          requires:
            - build_and_push_docker_image
          filters:
            branches:
              only:
                - master
                - develop
